{"ast":null,"code":"var _jsxFileName = \"/Users/apple/anupamv/Anupam/ReactProject/sevkin/src/Service/Util.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport Toast from 'react-bootstrap/Toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const validateUsernamePassword = (username, password) => {\n  const errors = [];\n  if (!username || typeof username !== 'string' || username.trim() === '') {\n    errors.push(\"Username is required.\");\n  } else {\n    const trimmedUsername = username.trim();\n    if (trimmedUsername.length < 3) {\n      errors.push(\"Username must be at least 3 characters long.\");\n    }\n    /*if (trimmedUsername.length > 20) {\n        errors.push(\"Username cannot exceed 20 characters.\");\n    }\n    // Example: Only allow alphanumeric, underscore, and hyphen characters\n    if (!/^[a-zA-Z0-9_-]+$/.test(trimmedUsername)) {\n        errors.push(\"Username can only contain letters, numbers, underscores, and hyphens.\");\n    }*/\n    // Add more specific username rules as needed, e.g., no leading/trailing spaces\n  }\n\n  // --- Password Validation Rules ---\n  if (!password || typeof password !== 'string' || password.trim() === '') {\n    errors.push(\"Password is required.\");\n  } else {\n    const trimmedPassword = password.trim();\n    if (trimmedPassword.length < 5) {\n      errors.push(\"Password must be at least 5 characters long.\");\n    }\n    /*if (trimmedPassword.length > 50) {\n        errors.push(\"Password cannot exceed 50 characters.\");\n    }\n    if (!/[A-Z]/.test(trimmedPassword)) {\n        errors.push(\"Password must contain at least one uppercase letter.\");\n    }\n    if (!/[a-z]/.test(trimmedPassword)) {\n        errors.push(\"Password must contain at least one lowercase letter.\");\n    }\n    if (!/[0-9]/.test(trimmedPassword)) {\n        errors.push(\"Password must contain at least one number.\");\n    }\n    // Example: Requires at least one special character (non-alphanumeric, non-space)\n    if (!/[^a-zA-Z0-9\\s]/.test(trimmedPassword)) {\n        errors.push(\"Password must contain at least one special character.\");\n    }*/\n  }\n\n  // Determine overall validity\n  const isValid = errors.length === 0;\n  return {\n    isValid,\n    errors\n  };\n};\nexport const justAnAlert = () => {\n  alert('hello');\n};\nexport const ShowSuccessCall = ({\n  message\n}) => {\n  _s();\n  // State to control the visibility of the toast\n  const [showSuccess, setShowSuccess] = useState(true); // Start as true to immediately show the toast\n\n  useEffect(() => {\n    if (showSuccess) {\n      setTimeout(function () {\n        setShowSuccess(false);\n        window.location.reload();\n      }, 2000);\n    }\n  }, [showSuccess]); // Empty dependency array ensures this effect runs only once on mount\n\n  // Render the Toast component\n  return /*#__PURE__*/_jsxDEV(Toast, {\n    show: showSuccess,\n    onClose: () => setShowSuccess(false) // Optional: allow user to close manually\n    ,\n    style: {\n      position: 'fixed',\n      // Position the toast\n      top: '20px',\n      right: '20px',\n      zIndex: 9999,\n      // Ensure it's above other content\n      backgroundImage: 'linear-gradient(#4BB543,#87cc80)',\n      // Success gradient\n      color: 'white',\n      fontSize: '15px',\n      borderLeft: '4px solid green'\n    },\n    children: /*#__PURE__*/_jsxDEV(Toast.Body, {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        style: {\n          padding: '8px',\n          marginRight: '10px'\n        } // Added right margin for spacing\n        ,\n        src: \"/sevkin/assets/img/icon/success.png\",\n        alt: \"sevkin\",\n        height: 50,\n        width: 50\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n_s(ShowSuccessCall, \"wvovKuHfJ0l2fZdnknm7J4/kZDA=\");\n_c = ShowSuccessCall;\nexport const ShowErrorCall = ({\n  message\n}) => {\n  _s2();\n  // Renamed for clarity and to indicate it's a component\n  const [showError, setShowError] = useState(true); // Start as true to immediately show the toast\n\n  useEffect(() => {\n    if (showError) {\n      setTimeout(function () {\n        setShowError(false);\n      }, 2000);\n    }\n  }, [showError]); // Empty dependency array ensures this effect runs only once on mount\n\n  // Render the Toast component\n  return /*#__PURE__*/_jsxDEV(Toast, {\n    show: showError,\n    onClose: () => setShowError(false) // Optional: allow user to close manually\n    ,\n    style: {\n      position: 'fixed',\n      // Position the toast\n      top: '20px',\n      right: '20px',\n      zIndex: 9999,\n      // Ensure it's above other content\n      backgroundImage: 'linear-gradient(#DC3545,#ee7b7b)',\n      color: 'white',\n      fontSize: '15px',\n      borderLeft: '4px solid red'\n    },\n    children: /*#__PURE__*/_jsxDEV(Toast.Body, {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/sevkin/assets/img/icon/error.png\",\n        alt: \"sevkin\",\n        height: 50,\n        width: 50,\n        style: {\n          marginRight: '10px'\n        } // Add some spacing\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 9\n  }, this);\n};\n_s2(ShowErrorCall, \"vR3OhI5LNjqGDeaoiraDjXxV08g=\");\n_c2 = ShowErrorCall;\nvar _c, _c2;\n$RefreshReg$(_c, \"ShowSuccessCall\");\n$RefreshReg$(_c2, \"ShowErrorCall\");","map":{"version":3,"names":["useState","useEffect","Toast","jsxDEV","_jsxDEV","validateUsernamePassword","username","password","errors","trim","push","trimmedUsername","length","trimmedPassword","isValid","justAnAlert","alert","ShowSuccessCall","message","_s","showSuccess","setShowSuccess","setTimeout","window","location","reload","show","onClose","style","position","top","right","zIndex","backgroundImage","color","fontSize","borderLeft","children","Body","padding","marginRight","src","alt","height","width","fileName","_jsxFileName","lineNumber","columnNumber","_c","ShowErrorCall","_s2","showError","setShowError","_c2","$RefreshReg$"],"sources":["/Users/apple/anupamv/Anupam/ReactProject/sevkin/src/Service/Util.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport Toast from 'react-bootstrap/Toast';\n\nexport const validateUsernamePassword = (username, password) => {\n    const errors = [];\n\n    if (!username || typeof username !== 'string' || username.trim() === '') {\n        errors.push(\"Username is required.\");\n    } else {\n        const trimmedUsername = username.trim();\n        if (trimmedUsername.length < 3) {\n            errors.push(\"Username must be at least 3 characters long.\");\n        }\n        /*if (trimmedUsername.length > 20) {\n            errors.push(\"Username cannot exceed 20 characters.\");\n        }\n        // Example: Only allow alphanumeric, underscore, and hyphen characters\n        if (!/^[a-zA-Z0-9_-]+$/.test(trimmedUsername)) {\n            errors.push(\"Username can only contain letters, numbers, underscores, and hyphens.\");\n        }*/\n        // Add more specific username rules as needed, e.g., no leading/trailing spaces\n    }\n\n    // --- Password Validation Rules ---\n    if (!password || typeof password !== 'string' || password.trim() === '') {\n        errors.push(\"Password is required.\");\n    } else {\n        const trimmedPassword = password.trim();\n        if (trimmedPassword.length < 5) {\n            errors.push(\"Password must be at least 5 characters long.\");\n        }\n        /*if (trimmedPassword.length > 50) {\n            errors.push(\"Password cannot exceed 50 characters.\");\n        }\n        if (!/[A-Z]/.test(trimmedPassword)) {\n            errors.push(\"Password must contain at least one uppercase letter.\");\n        }\n        if (!/[a-z]/.test(trimmedPassword)) {\n            errors.push(\"Password must contain at least one lowercase letter.\");\n        }\n        if (!/[0-9]/.test(trimmedPassword)) {\n            errors.push(\"Password must contain at least one number.\");\n        }\n        // Example: Requires at least one special character (non-alphanumeric, non-space)\n        if (!/[^a-zA-Z0-9\\s]/.test(trimmedPassword)) {\n            errors.push(\"Password must contain at least one special character.\");\n        }*/\n    }\n\n    // Determine overall validity\n    const isValid = errors.length === 0;\n\n    return { isValid, errors };\n};\n\nexport const justAnAlert = () => {\n    alert('hello');\n};\n\nexport const ShowSuccessCall = ({ message }) => {\n    // State to control the visibility of the toast\n    const [showSuccess, setShowSuccess] = useState(true); // Start as true to immediately show the toast\n\n    useEffect(() => {\n        if (showSuccess) {\n            setTimeout(function () {\n                setShowSuccess(false)\n                window.location.reload();\n            }, 2000);\n        }\n    }, [showSuccess]); // Empty dependency array ensures this effect runs only once on mount\n\n    // Render the Toast component\n    return (\n        <Toast\n            show={showSuccess}\n            onClose={() => setShowSuccess(false)} // Optional: allow user to close manually\n            style={{\n                position: 'fixed', // Position the toast\n                top: '20px',\n                right: '20px',\n                zIndex: 9999, // Ensure it's above other content\n                backgroundImage: 'linear-gradient(#4BB543,#87cc80)', // Success gradient\n                color: 'white',\n                fontSize: '15px',\n                borderLeft: '4px solid green'\n            }}\n        >\n            <Toast.Body>\n                <img\n                    style={{ padding: '8px', marginRight: '10px' }} // Added right margin for spacing\n                    src=\"/sevkin/assets/img/icon/success.png\"\n                    alt=\"sevkin\"\n                    height={50}\n                    width={50}\n                />\n                <b>{message}</b>\n            </Toast.Body>\n        </Toast>\n    );\n};\n\nexport const ShowErrorCall = ({ message }) => { // Renamed for clarity and to indicate it's a component\n    const [showError, setShowError] = useState(true); // Start as true to immediately show the toast\n\n    useEffect(() => {\n        if (showError) {\n            setTimeout(function () {\n                setShowError(false)\n            }, 2000);\n        }\n    }, [showError]); // Empty dependency array ensures this effect runs only once on mount\n\n    // Render the Toast component\n    return (\n        <Toast\n            show={showError}\n            onClose={() => setShowError(false)} // Optional: allow user to close manually\n            style={{\n                position: 'fixed', // Position the toast\n                top: '20px',\n                right: '20px',\n                zIndex: 9999, // Ensure it's above other content\n                backgroundImage: 'linear-gradient(#DC3545,#ee7b7b)',\n                color: 'white',\n                fontSize: '15px',\n                borderLeft: '4px solid red'\n            }}\n        >\n            <Toast.Body>\n                <img\n                    src=\"/sevkin/assets/img/icon/error.png\"\n                    alt=\"sevkin\"\n                    height={50}\n                    width={50}\n                    style={{ marginRight: '10px' }} // Add some spacing\n                />\n                <b>{message}</b>\n            </Toast.Body>\n        </Toast>\n    );\n}"],"mappings":";;;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,OAAO,MAAMC,wBAAwB,GAAGA,CAACC,QAAQ,EAAEC,QAAQ,KAAK;EAC5D,MAAMC,MAAM,GAAG,EAAE;EAEjB,IAAI,CAACF,QAAQ,IAAI,OAAOA,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,CAACG,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;IACrED,MAAM,CAACE,IAAI,CAAC,uBAAuB,CAAC;EACxC,CAAC,MAAM;IACH,MAAMC,eAAe,GAAGL,QAAQ,CAACG,IAAI,CAAC,CAAC;IACvC,IAAIE,eAAe,CAACC,MAAM,GAAG,CAAC,EAAE;MAC5BJ,MAAM,CAACE,IAAI,CAAC,8CAA8C,CAAC;IAC/D;IACA;AACR;AACA;AACA;AACA;AACA;AACA;IACQ;EACJ;;EAEA;EACA,IAAI,CAACH,QAAQ,IAAI,OAAOA,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,CAACE,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;IACrED,MAAM,CAACE,IAAI,CAAC,uBAAuB,CAAC;EACxC,CAAC,MAAM;IACH,MAAMG,eAAe,GAAGN,QAAQ,CAACE,IAAI,CAAC,CAAC;IACvC,IAAII,eAAe,CAACD,MAAM,GAAG,CAAC,EAAE;MAC5BJ,MAAM,CAACE,IAAI,CAAC,8CAA8C,CAAC;IAC/D;IACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI;;EAEA;EACA,MAAMI,OAAO,GAAGN,MAAM,CAACI,MAAM,KAAK,CAAC;EAEnC,OAAO;IAAEE,OAAO;IAAEN;EAAO,CAAC;AAC9B,CAAC;AAED,OAAO,MAAMO,WAAW,GAAGA,CAAA,KAAM;EAC7BC,KAAK,CAAC,OAAO,CAAC;AAClB,CAAC;AAED,OAAO,MAAMC,eAAe,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAC5C;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAEtDC,SAAS,CAAC,MAAM;IACZ,IAAImB,WAAW,EAAE;MACbE,UAAU,CAAC,YAAY;QACnBD,cAAc,CAAC,KAAK,CAAC;QACrBE,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC;MAC5B,CAAC,EAAE,IAAI,CAAC;IACZ;EACJ,CAAC,EAAE,CAACL,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEnB;EACA,oBACIhB,OAAA,CAACF,KAAK;IACFwB,IAAI,EAAEN,WAAY;IAClBO,OAAO,EAAEA,CAAA,KAAMN,cAAc,CAAC,KAAK,CAAE,CAAC;IAAA;IACtCO,KAAK,EAAE;MACHC,QAAQ,EAAE,OAAO;MAAE;MACnBC,GAAG,EAAE,MAAM;MACXC,KAAK,EAAE,MAAM;MACbC,MAAM,EAAE,IAAI;MAAE;MACdC,eAAe,EAAE,kCAAkC;MAAE;MACrDC,KAAK,EAAE,OAAO;MACdC,QAAQ,EAAE,MAAM;MAChBC,UAAU,EAAE;IAChB,CAAE;IAAAC,QAAA,eAEFjC,OAAA,CAACF,KAAK,CAACoC,IAAI;MAAAD,QAAA,gBACPjC,OAAA;QACIwB,KAAK,EAAE;UAAEW,OAAO,EAAE,KAAK;UAAEC,WAAW,EAAE;QAAO,CAAE,CAAC;QAAA;QAChDC,GAAG,EAAC,qCAAqC;QACzCC,GAAG,EAAC,QAAQ;QACZC,MAAM,EAAE,EAAG;QACXC,KAAK,EAAE;MAAG;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACb,CAAC,eACF5C,OAAA;QAAAiC,QAAA,EAAInB;MAAO;QAAA2B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACV,CAAC;AAEhB,CAAC;AAAC7B,EAAA,CAzCWF,eAAe;AAAAgC,EAAA,GAAfhC,eAAe;AA2C5B,OAAO,MAAMiC,aAAa,GAAGA,CAAC;EAAEhC;AAAQ,CAAC,KAAK;EAAAiC,GAAA;EAAE;EAC5C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGrD,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAElDC,SAAS,CAAC,MAAM;IACZ,IAAImD,SAAS,EAAE;MACX9B,UAAU,CAAC,YAAY;QACnB+B,YAAY,CAAC,KAAK,CAAC;MACvB,CAAC,EAAE,IAAI,CAAC;IACZ;EACJ,CAAC,EAAE,CAACD,SAAS,CAAC,CAAC,CAAC,CAAC;;EAEjB;EACA,oBACIhD,OAAA,CAACF,KAAK;IACFwB,IAAI,EAAE0B,SAAU;IAChBzB,OAAO,EAAEA,CAAA,KAAM0B,YAAY,CAAC,KAAK,CAAE,CAAC;IAAA;IACpCzB,KAAK,EAAE;MACHC,QAAQ,EAAE,OAAO;MAAE;MACnBC,GAAG,EAAE,MAAM;MACXC,KAAK,EAAE,MAAM;MACbC,MAAM,EAAE,IAAI;MAAE;MACdC,eAAe,EAAE,kCAAkC;MACnDC,KAAK,EAAE,OAAO;MACdC,QAAQ,EAAE,MAAM;MAChBC,UAAU,EAAE;IAChB,CAAE;IAAAC,QAAA,eAEFjC,OAAA,CAACF,KAAK,CAACoC,IAAI;MAAAD,QAAA,gBACPjC,OAAA;QACIqC,GAAG,EAAC,mCAAmC;QACvCC,GAAG,EAAC,QAAQ;QACZC,MAAM,EAAE,EAAG;QACXC,KAAK,EAAE,EAAG;QACVhB,KAAK,EAAE;UAAEY,WAAW,EAAE;QAAO,CAAE,CAAC;MAAA;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnC,CAAC,eACF5C,OAAA;QAAAiC,QAAA,EAAInB;MAAO;QAAA2B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACV,CAAC;AAEhB,CAAC;AAAAG,GAAA,CAvCYD,aAAa;AAAAI,GAAA,GAAbJ,aAAa;AAAA,IAAAD,EAAA,EAAAK,GAAA;AAAAC,YAAA,CAAAN,EAAA;AAAAM,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}